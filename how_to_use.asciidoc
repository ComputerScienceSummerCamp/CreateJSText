:sectnums:
:chapter-label:
:toc: left
:toc-title: 目次
:toclevels: 2
:source-highlighter: coderay
:imagesdir: ./
:pdf-style: themes/my-theme.yml
:pdf-styledir: themes/ 
:pdf-fontsdir: themes/fonts/

:doctitle: Javascriptコース

= [doctitle]

//== Javascriptゲームコースサブテキスト

//:toc:
//:sectnums:

== はじめに

=== パスワードについて

1人づつ名前を呼びますので名前が呼ばれたら前の方にパスワードが書かれた紙を取りに来てください。

* 裏に必ず名前を書いてください。
* カリキュラムの間はケースの中にしまうなどして絶対に無くさないでください。
* 他の人に紙を絶対に見せないでください。
* 後ほど回収しますので指示に従ってください。
* カリキュラムが終わったら必ずログアウトしてください。

=== 諸注意
* 演習室内の飲食を禁じます。
* 目の前のWS機器で携帯などの給電をしないでください。
* 端末の主電源を絶対に落とさないでください。
(学内全マシンに影響が出る恐れがあるので厳守してください。)
* マウスやキーボードのケーブルを抜かないでください。
* 飲食は外のソファ等で行ってください。
* 途中、10分程度の休憩を挟みますがその間はなるべく目を休めるようにしてください。
* トイレは自由に行ってもらって構いませんが近くのインストラクターに断ってから行ってください。
* カリキュラム中に何か困ったことがあったら手をあげて近くのインストラクターを呼んで下さい。

== 導入

=== まず、Javascriptコースでは何をするの？

このコースでは、Javascriptで簡単なゲームを作っていきます。今回は「CreateJS」というライブラリを使います。

１日目は、Javascriptの基礎知識やCreateJSの使い方、簡単なゲームの作り方を学びます。

２、３日目は、初日で学んだ知識をもとにゲームを作っていきます。何人かのチームに分かれてゲームを作っていきましょう。

最終日は、作ったゲームをみんなでプレイしましょう！

=== Javascriptってなあに？

Javascript（ジャバスクリプト）とは、プログラミング言語の１つで、Webゲームを作るときに使われる言語です。Javaと名前は似ていますが全く違う言語です。

=== CreateJSってなあに？

CreateJSは、Webゲームをより簡単に作るためのものです。ゲームを作る際にとても便利です。

=== Javascriptって何に使われているの？

Webページの多くは、Javascriptで作られています。

== WebStromを使おう

=== WebStormとは

WebStormとは、HTMLやJavascriptのための統合開発環境です。簡単に言うと、これ一つで、WebJavascriptのコーディング、実行までできる便利なものです。

=== WebStormの使い方

まず、WebSormのアイコンをクリックして、WebStormを起動させます。
// TODO 初回の起動が必要か？できればこちらで済ましたい。

==== 新しいプロジェクトを作る

WebStormが起動したら、`Create New Project` をクリックして、新しいプロジェクトを作ります。

image::img/webstorm/webstorm1.png[]

次に、プロジェクトを作る場所を指定します。入力されている文字の途中までは変えなくてもいいですが、最後のスラッシュ以降の文字は変えましょう。名前はなんでもいいですが、ここではuntitledにしておきましょう。

// TODO いいプロジェクト名を考えておく

image::img/webstorm/webstorm2.png[]

入力ができたら、右下の `Create` ボタンをクリックします。すると、以下の画面が出できたと思います。

image::img/webstorm/webstorm3.png[]

==== HTMLファイルを作成する

次にHTMLファイルを作成してみましょう。左のエリアのフォルダを右クリックして、New → HTML Fileを選択します。すると、小さいウィンドウが出てくるので、そこの `Name` という欄にファイル名を入力しましょう。HTMLのファイル名はなんでもいいですが、ここでは名前をindex.htmlとしておきます。

image::img/webstorm/webstorm4.png[]

名前が入力できたら、 `OK` ボタンをクリックします。すると以下のようにHTMLファイルが作られます。

image::img/webstorm/webstorm5.png[]

==== ブラウザ上で表示してみよう

それでは、このHTMLファイルをブラウザ上で表示してみましょう。ブラウザで表示するためには、左上のほうにある、小さいアイコンたちがあるのがわかりますか。そのアイコンのうち1つをクリックしてください。

image::img/webstorm/webstorm6.png[]

すると、真っ白いページが表示されたと思います。上のバーのところに `Title` と表示されていればOKです。

//TODO Webページの表示結果

ここからゲーム画面などを追加していくので、今は真っ白いページで大丈夫です。

==== タイトルを変えて、ブラウザで表示してみよう

titleタグで囲まれたところを変更しましょう。こうすることで、ブラウザで表示したときに、ページのタイトルが変わります。

[source, html]
----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>タイトル！</title>
</head>
<body>

</body>
</html>
----

// TODO 結果の表示

== CreateJSで作られたゲームを改造してみよう

この賞では、CreateJSを深く学ぶ前に、CreateJSで作られたゲームのサンプルを使って遊んでみましょう。遊んだら、このゲームを少し改造してみましょう。

=== CreateJSのゲームのサンプル

以下にサンプルのソースコードの載せます。

// TODO コードのインポート

[source, javascript]
----
include::process/phase20.html[]
----

=== 少し改造してみる。

背景の色、敵の数、プレイヤーの色、プレイヤーの動きやすさなどを変えてみましょう。

// TODO 変え方をのせる。

== CreateJSでシューティングゲームを作ってみる。

さて、前章でシューティングゲームを少し作り変えてみました。この章では、そのゲームがどのような過程でつくられているのかを詳しく見ていきましょう。

=== CreateJSを使うための下準備

==== HTMLファイルの作成

まずは、 `New -> HTML File` でHTMLファイルを作成します。この中にゲームを作るためのコードを記述していきます。HTMLファイルを作ると、以下のようなものが出来上がると思います。

[source, html]
----
include::process/phase0.html[]
----

titleはshootingにしておきました。自分で好きなタイトルに変えて構いません。

==== canvasタグの追加

次は、ゲーム画面をどのくらいの大きさにするかを決めます。 `<canvas id="myCanvas" width="960" height="540"></canvas>` というコードを以下のようにbodyタグ内に追加します。

[source, html]
----
include::process/phase1.html[]
----

canvasタグは、文字通り、キャンバスのごとく自由に絵をかくことができます。そのcanvasの中にゲームを描いていくような感じです。

canvasタグのidはここでは、myCanvasとしておきます。

また、width属性で横幅を調整できて、height属性で高さを調整できます。ここでは、横が960、高さが540となっていますね。

==== CreateJSを使えるようにする

CreateJSを使うためには、それを読み込む必要があります。どう読み込むかといいますと、以下のようにscriptタグを追加して読み込みます。6行目に追加してある、 `<script src="https://code.createjs.com/1.0.0/createjs.min.js"></script>` ですね。

[source, html]
----
include::process/phase2.html[]
----

==== 関数を定義する

次に、ゲームのプログラムを記述する関数を定義します。

[source, html]
----
include::process/phase3.html[]
----

//TODO loadはページを読み込んでから？それともライブラリを読み込んでから？

`window.addEventListener("load", init);` は、CreateJSを読み込んでから、init関数を呼び出します。つまり、CreateJSを完全に読み込んでから、ゲームが始まります。もしCreateJSを読み込む前にゲームが始まってしまうと大変ですから、そういうことがないようにしています。

=== ゲーム画面の表示

==== Stageの作成

CreateJSでは、まずStageという生地をベースに他のオブジェクトを追加します。ですのでまず最初はStageを作ります。

[source, javascript]
----
include::process/phase4.html[lines=11..13]
----

（ここからは、init関数の中だけを変更していくので、その他のHTMLは省略します。）

ここで注意したいのが、new createjs.Stageの中の文字。これは、canvasタグで指定したidと同じにしなければいけません。この場合だと、 `myCanvas` とする必要があります。

==== 背景の表示

このままでは、Stageに何も追加されていないので、次はゲーム画面の背景を追加してみましょう。背景の色はここでは黒色にしています。

[source, javascript]
----
include::process/phase5.html[lines=11..19]
----

`new createjs.Shape()` で、シェイプを作ります。ここで注意してほしいのは、**new**をつけ忘れないようにしてくださいね。それで、これを変数として保存しておきたいので、 `var stage = new createjs.Stage("myCanvas");` というふうに変数に格納します。

`bg.graphics.beginFill("black").drawRect(0,0,960,540);` は、シェイプの特徴を詳しく記述しています。ここでは背景を指しますね。ではどんなシェイプかといいますと、背景が黒で、座標(0,0)が始点の幅960・高さ540の長方形。これで背景を表しています。

あとはその背景をstageに追加します。 `stage.addChild(bg);` でステージに背景を追加できます。これをしないと、背景が表示されないことになります。

また、最後に `stage.update()` で毎回背景を描画してくれます。

これで実行してみて、黒い四角形が表示されていればOKです。

image::img/img1.png[]

=== プレイヤーの表示

[source, javascript]
----
include::process/phase6.html[lines=11..23]
----

背景と同じ要領で、プレイヤーもシェイプで作っていきます。プレイヤーの色は白にして、形は丸にでもしておきましょう。

この `drawCircle(100,100,10)` の意味は、中心の座標が(100,100)で、半径が10の円という意味です。

// TODO 10の単位はピクセルかな？

実行してみると、丸い円が表示されます。

=== プレイヤーがマウスで動けるようにする

では、このプレイヤーを動かしてみましょう。

==== tickイベントを作る

まず、プレイヤーを動かすために、更新処理をする必要があって、それをするために、createjs.Tickerクラスのtickイベントを使います。

[source, javascript]
----
include::process/phase7.html[lines=11..28]
----

`createjs.Ticker.setFPS(60);` とすることで、１秒間に60回の頻度で画面が更新されていきます。また、 `handleTick` という関数を作って、その中に、  `stage.update()` を入れましょう。

==== プレイヤーとマウスの動きを同期させる

次に、プレイヤーがマウスの動きと同じになるようにしてみましょう。

[source, javascript]
----
include::process/phase8.html[lines=11..31]
----

`player.x = stage.mouseX;` で、プレイヤーのx座標をマウスのx座標に変えています。y座標も同様です。

こうすることで、マウスについてくるようになりますが、、、

何かおかしいですよね。マウスの位置とプレイヤーの位置がずれているような。。
実は、プレイヤーを円で描画するときに、 `player.graphics.beginFill("white").drawCircle(100,100,10);` としましたよね。注目してほしいのが 、drawCircleのところ。中心座標が（100,100）となっていますが、実はこれ、相対的な座標になっています。つまり、マウスで動かしても、 `マウスの位置+100` の位置に円が描画されることになってしまうのです。

これを修正するには、drawCircleのところを `drawCircle(0,0,10)` にしてしまいましょう。


[source, javascript]
----
include::process/phase9.html[lines=11..31]
----

こうすれば、ちゃんとついてきますね！

image::img/img2.png[]

=== 敵を出現させる

次は敵を出現させてみましょう。今回は、100フレームに１体、ランダムな位置から敵を出現させてみます。

==== 100フレームに１体敵を出現させる

まずは、フレームを数える必要がありますね。そこで、 `count` という変数を作って、フレームを数えましょう。フレーム数を数えるには、毎回 `count` を１ずつ足していく必要がありますね。

[source, javascript]
----
include::process/phase10.html[lines=11..38]
----

`count` の変数宣言は、init関数の最初の方で行います。handleTick関数内で `count` を宣言してしまうと、ローカル変数となってしまい、 `count` が毎回0で初期化されてしまいます。毎回0になってしまってはしょうがないので、init関数の最初の方で宣言することによって、countの情報が無くならずに、countが増え続けます。

if文は、丸括弧内の式の条件が正しければその下の処理を実行するので、ここでは `count % 100 === 0` であれば、下の中括弧の処理を実行します。では、count % 100 === 0 とは何なのでしょうか。

まず、 `count % 100` の意味は、「 `count` を100で割った余り」です。例えば、`103 % 100` なら答えは3だし、 `200 % 100` なら答えは0です。

そうすると、`count % 100 === 0` の意味は、「`count` を100で割った余りが0になるかどうか」です。つまり、 `count` が100の倍数になったときに、敵が出現します。

// TODO コラム。なぜ==ではなく===なのか

==== 右端から敵を出現させる

次に、プレイヤーを作った要領で敵を作ってみましょう。

[source, javascript]
----
include::process/phase11.html[lines=26..43]
----

敵を作る時、位置を決めてしまいます。ここでは、 `enemy.x = 960;` でx座標を960(右端)、 `enemy.y = 540 * Math.random();` でy座標をランダムにしています。

`Math.random()` は、0以上1未満の小数を返します。よって、 `540 * Math.random();` は、0以上540未満の数になります。

==== 敵を保存しておく「配列」

ここで、敵を作るだけだと、後に敵を動かすことができなくなるので、敵を保存しておく「配列」用意します。この配列もcountと同じように、init関数の最初の方に宣言します。


[source, javascript]
----
include::process/phase12.html[lines=11..45]
----

if文の最後のほうに、`enemyList.push(enemy)` と書いてありますね。これは、 `enemyList` という配列に `enemy` を追加していく処理です。

==== 全ての敵を動かす

敵１つずつのx座標を左にずらせば大丈夫そうですね。for文を使って1つずつ配列にアクセスしていって、x座標の値を1ずつ減らしていきましょう。

[source, javascript]
----
include::process/phase13.html[lines=27..48]
----

これで敵もちゃんと動くと思います。

image::img/img3.png[]

// TODO 座標の基準点の話（左上）

=== 敵とプレイヤーの当たり判定

敵とプレイヤーの当たり判定をつけるために、CreateJSで用意されている `hitTest` を使います。これを使うと、点とシェイプの当たり判定がわかります。

[source, javascript]
----
include::process/phase14.html[lines=27..55]
----

for文で敵全てとプレイヤーの当たり判定を確認します。 `hitTest` の括弧の中は、プレイヤーのx座標とy座標をそれぞれ入れましょう。

また、`enemyList[i].localToLocal(0,0, player);` は何かと言いますと、enemyをローカル座標に変えています。こうすることで、hitTestができるようになります。

// TODO なぜローカル座標に変換する必要があるのか？

=== ゲームオーバー画面に移動する

敵と接触したら、今度はゲームオーバー画面に移動してみましょう。 `gameOver` 関数を作って、当たり判定をしたif文の中に `gameOver` 関数を呼び出す処理をしてみましょう。

[source, javascript]
----
include::process/phase15.html[lines=27..62]
----

`gameOver` 関数内では、ゲームオーバーというポップアップを表示して、Tickerとstageの全てのイベントリスナーを消しています。つまり、ゲームを完全に止めるという処理です。

image::img/img4.png[]

=== プレイヤーが弾を発射できるようにする

次に、プレイヤーがクリックで弾を発射できるようにしましょう。

==== マウスイベントの登録

クリックをして何かをするためには、stageにマウスイベントの登録が必要となります。

[source, javascript]
----
include::process/phase16.html[lines=11..31]
----

`stage.addEventListener("click", handleClick);` をすることで、stageにclickのイベントが登録されます。つまり、クリックをした時の処理がかけるようになります。その処理は、新たに作った `handleClick` 関数で行います。

==== クリックで弾を出現させる

`handleClick` 関数内で、弾を出現させる処理をかいてみましょう。

[source, javascript]
----
include::process/phase17.html[lines=11..38]
----

敵を作ったのと同じように、弾も作っていきましょう。座標はプレイヤーの座標と同じでいいですね。敵で `enemyList` を作ったように、弾も `bulletList` という配列をinitの最初の方に宣言して、その配列に順次格納していくようにしましょう。

==== 弾を動かす

敵を動かしたように、弾も同じ方法で動かしましょう。今度はhandleTick内を修正します。

[source, javascript]
----
include::process/phase17.html[lines=40..72]
----

// TODO 画面外にでた時の処理

==== 弾と敵の当たり判定をつける

プレイヤーと敵の当たり判定をつけたやり方と同じように、全ての弾と全ての敵との当たり判定をします。そのために、2重のfor文を使います。

[source, javascript]
----
include::process/phase18.html[lines=40..81]
----

==== 弾が当たったら敵を消す

あとは、 `stage.removeChild` で、stageから弾と敵を削除します。配列からも、`spice` で削除します。

[source, javascript]
----
include::process/phase19.html[lines=40..85]
----

`bulletList.splice(i, 1);` は、配列のi番目の要素から1つだけを削除します。ここでは、敵に当たった弾が削除されますね。ちなみに、`bulletList.splice(i, 2);` にすると、配列のi番目の要素とその次の要素の2つの要素が削除されてしまいます。

== キー入力でプレイヤーを操作してみよう

ここまではマウス操作でプレイヤーを動かしましたが、今度はキーボードで操作できるようにしてみましょう。

=== プレイヤーを動かす

まず、init関数の中に以下のものを追加します。

```javascript
window.addEventListener("keydown", handleKeydown);
window.addEventListener("keyup", handleKeyUp);

function handleKeydown(event){
  // キーが押された時の処理
}

function handleKeyUp(event) {
  // キーを離した時の処理
}
```

ここから以下のように、キーが押された時にtrue、キーを離したときにfalseになる変数をそれぞれ用意して、処理をかきます。

[source, javascript]
----
include::key-html/key1.html[lines=32..85]
----

プログラムが長く見えますが、５回同じようなことをしているだけなので、１個ずつみていきましょう。

まず、handleKeyDown関数内の `let keyCode = event.keyCode;` は、押されたキーが何であるかを取得して（厳密にはキーコードをとってきます）、それをkeyCode変数に格納します。

スペースキーのキーコードは32らしいので、 `const SPACE = 32` で、SPACEという *定数* を作ります。定数というのは、あとから値を変更できないもののことです。これでSPACEという定数を使う限り、スペースキーのキーコードが32であることが保証されるので、何か変更したくない値を作りたいときは定数を使いましょう。

それから、`if (keyCode === SPACE) {}` でキーコードがスペースキーであるかを判定して、もしそうであれば、isSpace変数をtrueにします。こうすることで、スペースキーが押されたという状態を表すことができます。キーを離した場合も同様です。

他のキーについても同様のことが言えます。

あとは、isSpace, isUpなどの変数をどう使うかです。以下のように使います。前の章で

```javascript
player.x = stage.mouseX;
player.y = stage.mouseY;
```

としていたところを、

```javascript
if(isLeft === true) {
    player.x -= 3;
}
if(isUp === true){
    player.y -= 3;
}
if(isRight === true){
    player.x += 3;
}
if(isDown === true) {
    player.y += 3;
}
```

のようにします。isLeftがtrueなら（左キーが押されているなら）、プレイヤーのx座標を-3します（プレイヤーを左に移動させます）。他の方向でも同じようにすれば、キー入力でプレイヤーを動かすことができます。

=== スペースキーを押して弾を発射させる

スペースキーを押したら、弾を出現させる処理を書けばいいので、さっき書いたコードの下あたりに以下のコードを追加しましょう。

```javascript
if(isSpace === true) {
    let bullet = new createjs.Shape();
    bullet.graphics.beginFill("white").drawCircle(0, 0, 3);
    bullet.x = player.x;
    bullet.y = player.y;

    bulletList.push(bullet);
    stage.addChild(bullet);
}
```

これは、handleClick関数内で書いた処理をそっくりそのまま書けばOKですね。
これでプレイヤーから弾をキー入力で発射できるようになったと思います。

== 画像を表示してみよう

Shapeだけでは味気ないので、今度は画像を表示させて、それを動かせるようにしましょう。

まず、

```javascript
let player = new createjs.Shape();
player.graphics.beginFill("white").drawCircle(0, 0, 10);
```

としていたところを、以下のように変えます。

```javascript
let player = new createjs.Bitmap('img/touhou50.png');
player.crossOrigin="Anonymous";
```

`let player = new createjs.Bitmap('ファイルの場所');` で画像を読み込みます。２行目はおまじないだと思ってください。（これがないと、当たり判定を使う時などにエラーがおこります）

こうすれば画像が表示させたと思います。なお、当たり判定はプレイヤー画像と敵の中心１点との当たり判定になっています。

image:img/load-img1.png[]

=== 画像の基準点を真ん中にする

スペースキーを押して弾を発射してみると、頭のてっぺんから発射されてますね。これはこれでおもしろいですが、今回は体の中央から弾が発射されるように変えてみましょう。

```javascript
player.regX = player.getBounds().width / 2;
player.regY = player.getBounds().height / 2;
```

`player.getBounds().width` で画像の幅を取得して、 `player.getBounds().height` で画像の高さを取得します。あとはそれらを2で割れば、基準点がちょうど真ん中になります。

== Javascriptの基本

この章では、Javascriptという言語の基本的な構文や使い方について学んでいきます。

=== 変数について

みなさんは、「変数」という言葉は聞いたことがあるでしょうか？他のプログラミング言語にも変数はあるので知っているかも知れませんが、変数とは、数字や文字などを保存しておく箱のようなものです。

変数を使うためには、ここから変数を使いますよというようにコンピュータに教える必要があります。このことを、「変数を宣言する」といいます。Javascriptでは以下のように変数を宣言できます。

```javascript
let i = 1;
```

こうすることで、iという名前の変数を宣言し、その中身を1という数字にすることができます。

また変数は、その名の通り「変わる数」です。つまり、変数は中身に何かを入れたり、書き換えたりすることができます。変数を書き換えることを、「代入」といいます。

では、変数を宣言してから何かを代入してみましょう。

```javascript
let i = 1;
i = 3;
```

こうすることで、変数iの中身が1から3に変わります。

代入に関して、以下のようなかき方もできます。

```javascript
let i = 1;
i = i + 1;
```

さて、代入した式の右側を見てみると、 `i + 1` のようになっていて、それをiに代入していますね。これは、`i + 1`した結果（ここでは2）をiに代入しています。最終的にiの中身は2になっているはずです。

=== 変数の中身がどうなっているか知りたい時

また、Javascriptで変数の中身が何なのかを表示したいときは、 `console.log()` という関数を使いましょう。例えば変数iの中身を知りたい時は、

```javascript
let i = 1;
i = i + 1;
console.log(i);
```

のようにして、出力結果はブラウザのデベロッパーツールのConsoleタブなどで見るといいでしょう。（ブラウザの画面を右クリックして、「検証」を押せばデベロッパーツールが開けます。）

=== if文

次はif文について説明します。if文は、ある特定の条件のときだけ処理を実行したいときや、条件を分岐したいときに使います。

```javascript
if(条件文){
    条件が正しい時に実行;
}
else {
    条件が正しくない時;
}
```

例えば、プレイヤーのx座標が入っている変数 `playerX` があったとして、もしプレイヤーのx座標が0から500までなら「画面内です」と表示して、それ以外なら「画面外です」と表示してみます。

```javascript
if(0 <= playerX && playerX <= 500) {
    console.log("画面内です");
}
else {
    console.log("画面外です");
}
```

まずif文の条件文を見てみましょう。 `0 <= playerX` はplayerXが0以上という条件で、 `playerX <= 500` はplayerXが500以下という条件ですね。その２つの条件を `&&` で結んでいます。 `A && B` は、AかつBという意味です。つまり、 `0 <= playerX && playerX <= 500` という条件文は、「playerXが0以上 かつ　playerXが500以下」ということです。

（ここでは、`<=` は「以下」という意味で、`<` だと「未満」となります。）

実際のゲームでは、プレイヤーが画面外に行かないように、「もしプレイヤーの移動先が画面外なら、移動をしない」というふうにすれば、画面外に行かないように実装できます。

=== for文

for文は繰り返す処理をするときに使う構文です。かき方は以下のようになります。

```javascript
for(初期値; 実行し続ける条件; 増加（減少）分){
    繰り返す処理;
}
```

for文は初期化する変数が終了条件を満たすまで処理を繰り返します。実際に書いてみると以下のようになります。

```javascript
for(let i = 0; i < 10; i++){
    console.log(i);
}
```

まず変数iに0を入れて、iが10未満なら `console.log(i);` を実行し続けます。そして一回実行するごとに、 `i++` をします。 `i++` は、 `i = i + 1` と同じ意味で、iに1ずつ足していきます。

上のfor文を実行すると以下のような結果が出るはずです。

```javascript
0
1
2
3
4
5
6
7
8
9
```

=== 配列

配列とは、変数が複数集まったもののことです。変数を箱に例えると、箱が複数連なっているのが配列です。Javascriptで配列をかく時は、 `let a = [1,2,3,4]` のようになります。

//TODO 配列の図

配列がどこで使われるかというと、例えば弾を10個作って、それら全てを動かしたい時、(ここではx座標だけを動かすことにします)

```javascript
let bulletX1 = 10;
let bulletX2 = 5;
let bulletX3 = 13;
let bulletX4 = 19;
let bulletX5 = 2;
let bulletX6 = 20;
let bulletX7 = 14;
let bulletX8 = 0;
let bulletX9 = 4;
let bulletX10 = 21;

bulletX1 = bulletX1 + 3;
bulletX2 = bulletX2 + 3;
// ...途中省略
bulletX10 = bulletX10 + 3;
```

のように、配列を使わないと変数を10個宣言して、１０回移動の処理を書かなければいけなくなります。

では配列を使って表現してみます。

```javascript
let bullets = [10, 5, 13, 19, 2, 20, 14, 0, 4, 21];
for(let i = 0; i < bullets.length; i++) {
    bullets[i] += 3;
}
```

まず、10個の値を配列にいれます。

次に、iが0から `bullets.length` 未満なら繰り返します。 `bullets.length` は配列の中身が何個あるのかを表しています（ここでは10）。

次に、`bullets[i] += 3;` については、i番目のbulletsの値を+3します。例えば、bullets[0]は最初10でそこから+3するので、最終的にbullets[0]は13になります。

こうすることで、配列の中身の値全てを+3することができます。

=== 関数について

関数は、同じ処理をまとめて定義して、使い回せるようにしたものです。

Javascriptの関数は以下のように定義します。関数名にはわかりやすい名前をつけるようにしましょう。

```
function 関数名() {
　　処理1
   処理2
   ...
}
```

また、関数には引数と返り値を設けることもできます。

```
function 関数名(引数1,引数2,…) {
  処理1
  処理2
  ...
　return 返り値（戻り値）;
}
```

何かのデータを使って関数を実行したい時があります。その時に関数へ渡す値のことを *引数* と言います。

*返り値* は、関数を実行して最終的に返す値のことです。

//参考: https://www.epano-school.com/blog/mamechishiki-25/

ここでは簡単に、四則演算をする関数を作ってみましょう。

```javascript
<script>
function add(x, y) {
    return x + y;
}

function minus(x, y) {
    return x - y;
}

function multiply(x, y) {
    return x * y;
}

function divide(x, y) {
    return x / y;
}

console.log(add(1, 3));
console.log(minus(5, 3));
console.log(multiply(4, 5));
console.log(divide(9, 3));
</script>
```

それぞれの関数内にx,yという変数がありますが、これらは全部別ものです。その関数内でしか使われません。また、関数の使い方についてですが、`add(1, 3)` のように関数を呼び出します。

//　参考: https://techacademy.jp/magazine/5510

=== クラスについて

クラスとは、データをひとまとめにしたもの、いわば設計図のようなものです。実例を見せたほうがわかりやすいと思うので、ここではPlayerクラスを作っていきます。

まず、プレイヤーを作るにあたって必要なものは何か考えてみましょう。プレイヤーのx座標、y座標、プレイヤーの画像などが必要ですね。

それらをクラスで定義すると以下のようになります。

```javascript
class Player {
    constructor(x, y, img){
        this.x = x;
        this.y = y;
        this.img = img;
    }
}
```

このクラスはまだ設計図なので、実際にプレイヤーをつくってみましょう。

```javascript
var player = new Player(0,0,"player.png");
```

このようにPlayerクラスから実際のplayerを作ることを、「インスタンスを生成する」と言います。インスタンスを作る際、 `new クラス名(constructorに渡す引数１,引数２,...)` というようにします。

インスタンスを生成したことで、playerの情報がまとめて管理することができます。例えば、playerのx座標とy座標が知りたくなった時、

```javascript
console.log(player.x);
console.log(player.y);
```

のようにすれば、playerのx座標とy座標がわかります。

クラスには、x,yなどのデータ（フィールドと言います）だけではなく、動作も定義できます。例えば、playerが上に動く時は、

```javascript
class Player {
    constructor(x, y, img){
        this.x = x;
        this.y = y;
        this.img = img;
    }

    moveUp(){
        this.y -= 3; // thisをつける
    }
}
```

とクラスを定義して、

```javascript
player.moveUp();
```

とすれば、playerのy座標は-3されます。

== 2日目以降のグループワークについて

昨日のアンケートを元にゲーム制作のグループ分けを行いました。以下の項目を話し合って決めてください。

* どんなゲームを作るか。
* チームリーダー(受講生の中から1人)
* チーム名
* チームの役割分担

CAUTION: ゲーム制作の時間は限られています。なるべく早く決めてください。目安は30分以内です。

===  ファイルとディレクトリとは？

ゲーム制作に際して、HTMLファイルやjsファイル、画像ファイルなどをひとまとめにして作業を行う必要があります。 +
このまとまりのことを**ディレクトリ**といい、ディレクトリの構成要素を**ファイル**と言います。また、ファイルやディレクトリのある場所を**パス**と言います。 +
日常生活で例えると、ファイルが書類で、ディレクトリが書類を入れる箱と考えればわかりやすいのではないかと思います。 +
ディレクトリ操作に必要なコマンドを以下に示します。上に示したものほど使用頻度が高いと思いますので覚えるようにしましょう。

* `cd _path_`:Change Directoryの略、現在居るディレクトリ(カレントディレクトリという)から__path__の場所に移動できる。
* `ls`:カレントディレクトリに存在するファイル及びディレクトリを見ることができる。
* `pwd`:Print working Directoryの略、カレントディレクトリのパスを参照できる。
* `mkdir _directory_`:make Directoryの略、__directory__という名前のディレクトリを作る。
* `rm _file_`:removeの略、__file__という名前のファイルを削除する。
* `rmdir _directory_`:remove Directoryの略、__directory__という名前のディレクトリを削除する。

.lsとpwdの出力例
image:img/beginning/output.png[]

=== グループワークに取り掛かる前の準備

**チームリーダー**は以下の名前の通りに新しいプロジェクトを作成してください。

image:img/beginning/webstorm.png[]

その後、ターミナル(下の画像のアイコン)を開いて以下のコマンド上から順にを実行してください。 +
image:img/beginning/terminal.png[] +
($はプロンプトを表します。)


[source,console]
----
$ cd Desktop

$ chmod 775 Workplace

$ cd Workplace
----

チームリーダーは原則Workplaceというディレクトリのなかで作業を行うようにしてください。 +
そのほかのメンバーは作業ファイルをターミナル上で `$ cp _file_ ~g*js**/Desktop/Workplace/` を実行し適宜Workplaceにコピーしてください。

CAUTION: g*js**はチームリーダーのアカウント名にしてください。

=== ファイル分割について

以下にCreateJSによるゲーム製作におけるファイル分割の例を示します。 +
ゲームの内容は一番最初のサンプルシューティングゲームをキーボード制御バージョンです。 +
ここではゲームに必要な機能を以下のファイルに分割しています。

* 土台となるhtmlファイル(`index.html`)
* ゲームの主要部分を制御するJavascriptファイル(`main.js`)
* キーボード制御を司るJavascriptファイル(`handlekey.js`)
* ゲームオーバーのアラートを出力するJavascriptファイル(`GameOver.js`)

それでは見てみましょう。

.index.html
[source,html]
----
include::game/index.html[]
----

ファイル分割を行う場合、各々のファイルで共通して使用する変数はindex.htmlのbody要素の中の `<script type="text/javascript">` 要素内に `let` を使って宣言しないとなりません。
そうしないと共通の変数を使用することができません。 +
また、src属性を用いて3つのjsファイルを宣言しなくてはそのファイルの機能が反映されません。

.main.js
[source,javascript]
----
include::game/main.js[]
----

CAUTION: jsファイル内で共通の変数を初期化する場合はletをつけてはいけません。

.handlekey.js
[source,javascript]
----
include::game/handlekey.js[]
----

.GameOver.js
[source,javascript]
----
include::game/GameOver.js[]
----

ゲームオーバーのアラートを出力する場合は `GameOver();` と記述させれば出力できます。

実際のゲーム製作では機能毎にファイルを分割してメンバー毎に仕事を分担するようにしてください。

//=== タイトルをつける
// TODO シーンの遷移どうしよう？？

//画像の入れ方
//キーボード操作かマウス操作か。スマホ向けか。
// TODO JSの基礎（変数など）をおしえてもいいかも
// TODO 途中で演習問題をつくってみてもいいかも
// TODO letで宣言
// forかforeachか
// TODO コメント入れる？
// TODO git pageで公開
// TODO 関数のポイントなどを載せる？
// TODO ハードコーディングについて
// TODO 説明の図を使いたい。
// TODO ソースコードの部分的に背景をハイライトしてくれる機能を使う

// 参考：https://ics.media/tutorial-createjs/game_shooting.html
